<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns:atom="http://www.mulesoft.org/schema/mule/atom"
      xmlns:json="http://www.mulesoft.org/schema/mule/json"
      xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp"
      xmlns:twitter="http://www.mulesoft.org/schema/mule/twitter"
      xmlns:bpm="http://www.mulesoft.org/schema/mule/bpm"
    xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.2/mule.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/3.2/mule-http.xsd
        http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/3.2/mule-vm.xsd
        http://www.mulesoft.org/schema/mule/atom http://www.mulesoft.org/schema/mule/atom/3.2/mule-atom.xsd
        http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/3.2/mule-json.xsd
        http://www.mulesoft.org/schema/mule/twitter http://www.mulesoft.org/schema/mule/twitter/2.3/mule-twitter.xsd
        http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/3.2/mule-amqp.xsd
        http://www.mulesoft.org/schema/mule/bpm http://www.mulesoft.org/schema/mule/bpm/3.2/mule-bpm.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <description>
    Consumes CAP messages from NOAA and distrbutes them. POC.
    </description>
    
    <!-- Load up the filtered properties file for the application -->
    <spring:beans>
        <context:property-placeholder location="classpath:noaa-cap-poc.properties" />
    </spring:beans>

    <!-- 
         Instatiating an empty initial facts collection for the rules. For some reason, the rules requires
         an initial fact set, and will throw a null pointer exception if you don't have one defined.
    -->
    <spring:bean name="facts" class="java.util.ArrayList"/>

    <!--
        Used to set up the connector that will poll our RSS feed.
    -->
    <http:polling-connector name="atomConnector" pollingFrequency="1000" discardEmptyContent="true"/>

    <!-- Used to set up the connection to RabbitMQ -->
    <amqp:connector name="rabbit" host="rabbit" />

    <!-- 
         Setting up a 'topic' exchange that the outbound endpoint will post to and that the inbound
         endpoint will bind to.
    -->
    <amqp:endpoint name="alertsExchange" 
         exchangeName="alerts"
         exchangeAutoDelete="false"
         exchangeDurable="false"
         exchangeType="topic"
         connector-ref="topic" />

     <!-- Required setup for the rules engine. -->
    <bpm:drools />

    <!-- Configures the twitter account which we will be posting to. The properties should be filtered at build. -->
	<twitter:config name="twitter" 
        consumerKey="${twitter.consumer.key}" 
        consumerSecret="${twitter.consumer.secret}" 
        accessKey="${twitter.access.key}" 
        accessSecret="${twitter.access.secret}" />

    <!-- The virtual endpoint used by the drools engine to generate new messages to tweet -->
    <vm:endpoint name="tweet" address="vm://tweet" />

    <!-- 
         This flow will send the contents of any message sent to it via Twitter. It listens on 
         the vm://tweet inbound endpoint 
    -->
    <flow name="tweetFlow">
        <vm:inbound-endpoint ref="tweet" />
        <echo-component/> <!-- just for debugging purposes -->
		<twitter:update-status config-ref="twitter" status="#[message]" />
    </flow>

    <!-- 
         This flow listens RabbitMQ on the 'alerts' exchange on for any noaa.* alerts. It expects an JSON formatted
         Alert. It then runs the alert through drools.
    -->
    <flow name="consumeQueue">
        <amqp:inbound-endpoint exchangeName="alerts"
            routingKey="noaa.*"
            queueName="noaa" 
            queueDurable="false"
            queueExclusive="false"
            queueAutoDelete="true"
            connector-ref="rabbit"/>

        <!-- Hey, this is a comment -->

        <!-- the message payload is a byte[] currently, so we convert it to a JSON string first. -->

        <byte-array-to-string-transformer/>
        <json:json-to-object-transformer returnClass="com.cassidian.cap.Alert"/>

        <bpm:rules rulesDefinition="com/cassidian/cap/alertRules.drl" initialFacts-ref="facts" />
    </flow>

    <!--
        The flow listens to NOAA's ATOM feed. It parses the message, serializes the important parts on RabbitMQ
        using the 'alerts' exchange.
    -->
    <flow name="nationalAlerts">
        <http:inbound-endpoint address="http://alerts.weather.gov/cap/us.php?x=1" connector-ref="atomConnector">
            <atom:feed-splitter/>
            <atom:entry-last-updated-filter/> 
        </http:inbound-endpoint>

        <!-- instantiate the Alert -->
        <bean-builder-transformer beanClass="com.cassidian.cap.Alert">
            <bean-property property-name="author" evaluator="bean" expression="author.name"/>
            <bean-property property-name="title" evaluator="bean" expression="title"/>
            <bean-property property-name="summary" evaluator="bean" expression="summary"/>
            <bean-property property-name="url" evaluator="groovy" expression="payload.links[0].href"/>
        </bean-builder-transformer>

        <json:object-to-json-transformer/>
        
        <amqp:outbound-endpoint routingKey='noaa.na' 
            exchangeName="alerts" 
            connector-ref="rabbit"/>        
    </flow>
</mule>
